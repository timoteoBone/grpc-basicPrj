// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_basicPrj

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NutricionistClient is the client API for Nutricionist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NutricionistClient interface {
	SendRoutine(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*DietResponse, error)
}

type nutricionistClient struct {
	cc grpc.ClientConnInterface
}

func NewNutricionistClient(cc grpc.ClientConnInterface) NutricionistClient {
	return &nutricionistClient{cc}
}

func (c *nutricionistClient) SendRoutine(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*DietResponse, error) {
	out := new(DietResponse)
	err := c.cc.Invoke(ctx, "/proto.Nutricionist/SendRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NutricionistServer is the server API for Nutricionist service.
// All implementations must embed UnimplementedNutricionistServer
// for forward compatibility
type NutricionistServer interface {
	SendRoutine(context.Context, *UserData) (*DietResponse, error)
	mustEmbedUnimplementedNutricionistServer()
}

// UnimplementedNutricionistServer must be embedded to have forward compatible implementations.
type UnimplementedNutricionistServer struct {
}

func (UnimplementedNutricionistServer) SendRoutine(context.Context, *UserData) (*DietResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRoutine not implemented")
}
func (UnimplementedNutricionistServer) mustEmbedUnimplementedNutricionistServer() {}

// UnsafeNutricionistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NutricionistServer will
// result in compilation errors.
type UnsafeNutricionistServer interface {
	mustEmbedUnimplementedNutricionistServer()
}

func RegisterNutricionistServer(s grpc.ServiceRegistrar, srv NutricionistServer) {
	s.RegisterService(&Nutricionist_ServiceDesc, srv)
}

func _Nutricionist_SendRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NutricionistServer).SendRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Nutricionist/SendRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NutricionistServer).SendRoutine(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

// Nutricionist_ServiceDesc is the grpc.ServiceDesc for Nutricionist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nutricionist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Nutricionist",
	HandlerType: (*NutricionistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRoutine",
			Handler:    _Nutricionist_SendRoutine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fitness.proto",
}
